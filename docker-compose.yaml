version: "3"
services:
  cloudflare-ddns:
    profiles: [ cloudflare-ddns, private, all, all-unsec ] 
    image: favonia/cloudflare-ddns 
    restart: always 
    read_only: true 
    security_opt: 
      - no-new-privileges:true 
    environment:
      CF_API_TOKEN: ${CF_API_TOKEN}
      DOMAINS: ${USE_HOSTNAME}
      PROXIED: false
      IP6_PROVIDER: none
  crowdsec: 
    profiles: [ crowdsec, private, all, all-unsec ]
    image: crowdsecurity/crowdsec:latest-debian
    container_name: crowdsec 
    restart: always 
    environment:
      COLLECTIONS: "crowdsecurity/linux crowdsecurity/linux-lpe crowdsecurity/sshd" #crowdsecurity/nginx crowdsecurity/wordpress crowdsecurity/mariadb timokoessler/uptime-kuma"
      ENROLL_KEY: ${CROWDSEC_TOKEN}
      ENROLL_INSTANCE_NAME: ${USE_HOSTNAME}
      CROWDSEC_WEBHOOK: ${CROWDSEC_WEBHOOK}
      BOUNCER_KEY_IPTABLES: "4JCich*XJd9j#3RsT5kac!#m*!m&2w"
    volumes: 
      - /var/log/journal:/run/log/journal
      # - /var/run/docker.sock:/var/run/docker.sock
      # - "/srv/crowdsec/config:/etc/crowdsec"
      - "./crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml"
      - "./crowdsec/profiles.yaml:/etc/crowdsec/profiles.yaml"
      - "./crowdsec/slack.yaml:/etc/crowdsec/notifications/slack.yaml"
    ports: 
      - "127.0.0.1:29682:8080"
      - "127.0.0.1:6060:6060"
  crowdsec-firewall-bouncer: 
    profiles: [crowdsec-firewall-bouncer, private, all, all-unsec]
    build: https://github.com/meyersa/crowdsec-firewall-bouncer.git
    container_name: crowdsec-firewall-bouncer 
    restart: always 
    environment:
      - TZ=America/Detroit
    cap_add: 
      - NET_ADMIN
      - NET_RAW
    network_mode: host
    volumes: 
      - ./crowdsec/crowdsec-firewall-bouncer.yaml:/crowdsec-firewall-bouncer.yaml
    labels: 
      - "com.centurylinklabs.watchtower.enable=false" 
  trafficjam: 
    profiles: [ trafficjam, all ] 
    build: https://github.com/kaysond/trafficjam.git
    container_name: trafficjam
    restart: always
    cap_add:
      - NET_ADMIN
    network_mode: host
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
    environment:
      NETWORK: proxy
      WHITELIST_FILTER: ancestor=cloudflare/cloudflared
      TZ: America/Detroit 
    labels: 
      - "com.centurylinklabs.watchtower.enable=false" 
  cloudflared: 
    profiles: [ cloudflared, all, all-unsec ]
    image: cloudflare/cloudflared
    container_name: cloudflared
    restart: always 
    command: tunnel run 
    environment: 
      - TUNNEL_TOKEN=${CF_TUNNEL_TOKEN}
    networks:
      - proxy
  watchtower: 
    profiles: [ watchtower, private, all, all-unsec ]
    image: containrrr/watchtower
    container_name: watchtower 
    restart: always
    hostname: ${USE_HOSTNAME}
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock 
    environment: 
      WATCHTOWER_NOTIFICATION_REPORT: "true"
      WATCHTOWER_NOTIFICATION_URL: ${WATCHTOWER_NOTIFICATION_URL}
  s3-backup:
    profiles: [ s3-backup, private, all, all-unsec ]
    build: https://github.com/meyersa/backup-s3.git
    container_name: s3-backup
    init: true 
    restart: always 
    environment:
      BACKUP_ENABLED: ${BACKUP_ENABLED}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
      DATA_PATH: ${DATA_PATH}
      CRON_SCHEDULE: ${CRON_SCHEDULE}
    volumes: 
      - /srv:/srv:ro 
    labels: 
      - "com.centurylinklabs.watchtower.enable=false" 
  agent:
    profiles: [ agent, private, all, all-unsec ]
    image: grafana/agent:latest
    container_name: grafana-agent
    restart: always
    volumes:
      - ./agent/config.river:/etc/agent/config.river
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /proc:/host/proc:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log/journal:/var/log/journal
      - /var/run/journal:/var/run/journal
      - /etc/machine-id:/etc/machine-id:ro
      - ./maxmind/GeoLite2-City.mmdb:/maxmind/GeoLite2-City.mmdb
    entrypoint:
      - /bin/grafana-agent
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - ./etc/agent/config.river
    env_file:
      - .env
    environment:
      AGENT_MODE: flow
    network_mode: "host"
    deploy: 
      resources: 
        limits: 
          cpus: '0.5'

networks: 
  default: 
  proxy: 
    name: proxy