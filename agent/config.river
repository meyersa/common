logging { 
  level   = "error" 
  format  = "logfmt"

}

discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
  port = 12345

}




prometheus.exporter.unix "default" { }

prometheus.scrape "unix" {
  targets    = prometheus.exporter.unix.default.targets
  forward_to = [prometheus.remote_write.prom.receiver]

}

prometheus.exporter.agent "default" {}

prometheus.scrape "agent" {
  targets     = prometheus.exporter.agent.default.targets 
  job_name   = env("USE_HOSTNAME")
  forward_to  = [prometheus.remote_write.prom.receiver] 

}

prometheus.scrape "engine" {
  targets    = [{"__address__" = "localhost:9323"}]
  job_name   = env("USE_HOSTNAME")
  forward_to = [prometheus.remote_write.prom.receiver] 
  
}

prometheus.scrape "crowdsec" {
  targets = [{"__address__" = "localhost:6060"}]
  job_name   = env("USE_HOSTNAME")
  forward_to = [prometheus.remote_write.prom.receiver] 

}

prometheus.remote_write "prom" {
	endpoint {
		url = env("CORTEX_URL")
  
    basic_auth {
      username = env("CORTEX_USER")
      password = env("CORTEX_PASS")

    }
	}
}




loki.source.journal "default" {
  forward_to    = [loki.process.filter.receiver] 
  labels        = {"job" = "journalctl", "instance" = env("USE_HOSTNAME")} 
  relabel_rules = loki.relabel.journal.rules 

}

loki.source.docker "default" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.docker.containers.targets
  forward_to = [loki.process.filter.receiver]
  labels     = {"job" = "docker", "instance" = env("USE_HOSTNAME")}
  relabel_rules = loki.relabel.docker.rules

}

loki.relabel "journal" { 
  forward_to = [] 

  rule { 
    action        = "replace" 
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit" 

  }
}

loki.relabel "docker" {
  forward_to = []

  rule { 
    action        = "replace" 
    source_labels = ["__meta_docker_container_name"]
    target_label  = "container_name"

  }
}

loki.process "filter" { 
  forward_to    = [loki.process.metrics.receiver] 

  stage.metrics { 
    metric.counter { 
      name              = "log_lines_read"
      match_all         = true 
      action            = "inc"
      max_idle_duration = "24h"
    
    }
  }
  stage.drop { 
    older_than = "1h" 
    drop_counter_reason = "Too old" 

  }
  stage.drop {
    longer_than = "3KB"
    drop_counter_reason = "Too big" 
    
  }
  stage.drop { 
    expression = "GrafanaAgent|Uptime-Kuma" 
    drop_counter_reason = "Monitoring Host"

  }
  stage.drop { 
    expression = "could not set up a wait request to the Docker client"
    drop_counter_reason = "Spammy Log" 

  }
  stage.drop { 
    expression  = ".*debug.*"
    drop_counter_reason = "Debug" 
    
  }
  stage.metrics{
    metric.counter {
      name        = "log_lines_processed"
      match_all         = true
      action            = "inc"
      max_idle_duration = "24h"

    }
  }
}

loki.process "metrics" { 
  forward_to  = [loki.write.endpoint.receiver]
  
  stage.match {
    selector = "{unit=\"ssh.service\"}"

    stage.regex { 
      expression = "^Accepted(?P<ssh_accepted>.*?)$" 
  
    }
    stage.regex { 
      expression = "^.*closed(?P<ssh_closed>.*?)$"

    }
    stage.regex { 
      expression = "^.*error(?P<ssh_error>.*?)$"

    }
    stage.regex { 
      expression = "^.*( user|Accepted publickey for) (?P<connecting_user>.*?) .*$"

    }
    stage.regex { 
      expression = "^.* (?P<connecting_ip>[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}) .*$"

    }
    stage.labels { 
      values = { 
        connecting_user = "", 
        connecting_ip   = "", 

      }
    }
    stage.geoip {
      source  = "connecting_ip"
      db      = "../maxmind/GeoLite2-City.mmdb"
      db_type = "city"

    }
    stage.labels {
      values = {
        geoip_city_name          = "",
        geoip_country_name       = "",
        geoip_continent_name     = "",
        geoip_continent_code     = "",
        geoip_location_latitude  = "",
        geoip_location_longitude = "",
        geoip_postal_code        = "",
        geoip_timezone           = "",
        geoip_subdivision_name   = "",
        geoip_subdivision_code   = "",

      }
	  }
    stage.metrics { 
      metric.counter { 
        name              = "ssh_total" 
        match_all         = true 
        action            = "inc" 
        max_idle_duration = "24h"

      }
      metric.counter { 
        name              = "ssh_success" 
        source            = "ssh_accepted" 
        action            = "inc" 
        max_idle_duration = "24h"

      }
      metric.counter { 
        name              = "ssh_closed" 
        source            = "ssh_closed" 
        action            = "inc" 
        max_idle_duration = "24h" 

      }
      metric.counter { 
        name              = "ssh_error" 
        source            = "ssh_error" 
        action            = "inc" 
        max_idle_duration = "24h" 

      }
    }
  }

  stage.regex { 
    expression = "^.*error(?P<error_total>.*?)$"

  }
  stage.metrics {
    metric.counter { 
      name              = "error_total" 
      source            = "error_total"
      action            = "inc" 
      max_idle_duration = "24h"

    }
  }
}

loki.write "endpoint" {
  endpoint {
    url =env("LOKI_URL")
  
    basic_auth {
      username = env("LOKI_USER")
      password = env("LOKI_PASS")

    }
  }
}